ND_PRG_DCL : ident
└── < block >

< block >
├── [ ND_CST_DCL ]
│   ├── ND_BINARY_OP : TK_EQU			- declaration check -
│   │   ├── ND_IDENT : ident          	// constant name
│   │   └── ND_INTEGER : number       	// constant data
│   └── ND_BINARY_OP : TK_EQU
│       └── ...
├── [ ND_VAR_DCL ]
│   ├── ND_IDENT : ident               	- declaration check -
│   ├── ND_ARR_DCL						- declaration check -
│   │   ├── ND_IDENT : ident           	// array name
│   │   └── ND_INTEGER : number			// array size
│   └── ...
├── { ND_FUNC_DCL : ident }				- semantic declaration check -
│   ├── [ ND_PARAM ]
│   │   ├── ND_IDENT : ident			// parameter name
│   │   ├── ND_IDENT : ident
│   │   └── ...
│   └── < block >
└── ND_CODE_BLK
    ├── < statement > ;
    ├── ... ;
    └── < statement >

< statement >
└── ND_BINARY_OP : TK_ASSIGN			- assignment check -
    ├── ND_IDENT : ident				// variable name
    └── ND_EXPRESSION					// assignment data

< statement >
└── ND_BINARY_OP : TK_ASSIGN			- assignment check -
    ├── ND_SUBSCRIPT
    │   ├── ND_IDENT : ident			// array name
    │   └── ND_EXPRESSION				// array index ( < array size )
    └── ND_EXPRESSION					// assignment data

< statement >
└── ND_FUNC_CALL : ident
    ├── ND_EXPRESSION					// function parameters
    ├── ND_EXPRESSION
    └── ...

< statement >
└── ND_CODE_BLK
    ├── < statement > ;
    ├── ... ;
    └── < statement >

< statement >
└── ND_CONDITIONAL
    ├── ND_EXPRESSION					// if evaluate to non-zero
    ├── < statement >					// then
    └── [ < statement > ]				// else ( optional )

< statement >
└── ND_WHILE_LOOP
    ├── ND_EXPRESSION					// while evaluate to non-zero
    └── < statement >					// perform operation

< statement >
└── ND_FOR_LOOP							- loop check -
    ├── ND_IDENT : ident				// variable is implicitly incremented by 1 each loop, need to be declared
    ├── ND_EXPRESSION					// initial value
    ├── ND_EXPRESSION					// less or equal than value
    └── < statement >					// perform operation

ND_EXPRESSION is not generated in recursive_descent_parser.h, but in expression_parser.h
