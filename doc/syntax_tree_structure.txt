ND_PRG_DCL : ident
└── < block >

< block >
├── [ ND_CST_DCL ]
│   ├── ND_BINARY_OP : TK_EQU			- semantic dcl check -
│   │   ├── ND_NAME : ident          	// constant name
│   │   └── ND_LITERAL : number       	// constant value
│   └── ND_BINARY_OP : TK_EQU
│       └── ...
├── [ ND_VAR_DCL ]
│   ├── ND_NAME : ident               	- semantic dcl check -
│   ├── ND_ARR_DCL						- semantic dcl check -
│   │   ├── ND_NAME : ident           	// array name
│   │   └── ND_LITERAL : number			// array size
│   └── ...
├── [ ND_PROC_DCL : ident ]				- semantic dcl check -
│   ├── [ ND_FUNC_ARG ]
│   │   ├── ND_NAME : ident				// parameter name
│   │   ├── ND_NAME : ident
│   │   └── ...
│   └── < block >
└── ND_CODE_BLK
    ├── < statement > ;
    ├── ... ;
    └── < statement >

< statement >
└── ND_BINARY_OP : TK_ASSIGN			- semantic asn check -
    ├── ND_NAME : ident					// variable name
    └── < expression >					// assignment value
< statement >
└── ND_BINARY_OP : TK_ASSIGN			- semantic asn check -
    ├── ND_SUBSCRIPT
    │   ├── ND_NAME : ident				// array name
    │   └── < expression >				// array index ( < array size )
    └── < expression >					// assignment value

< statement >
└── ND_FUNC_CALL : ident
    ├── < expression >				// function parameters
    ├── < expression >
    └── ...

< statement >
└── ND_CODE_BLK
    ├── < statement > ;
    ├── ... ;
    └── < statement >

< statement >
└── ND_CONDITIONAL
    ├── < expression >				// if evaluate to non-zero
    ├── < statement >				// then
    └── [ < statement > ]			// else ( optional )

< statement >
└── ND_WHILE_LOOP
    ├── < expression >				// while evaluate to non-zero
    └── < statement >				// perform operation

< statement >
└── ND_FOR_LOOP						- semantic asn check -
    ├── ND_NAME : ident				// variable is implicitly incremented by 1 each loop
    ├── < expression >				// initial value
    ├── < expression >				// less or equal value
    └── < statement >				// perform operation

